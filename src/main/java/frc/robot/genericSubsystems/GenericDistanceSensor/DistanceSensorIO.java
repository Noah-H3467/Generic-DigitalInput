package frc.robot.genericSubsystems.GenericDistanceSensor;

import static edu.wpi.first.units.Units.Amp;
import static edu.wpi.first.units.Units.Amps;
import static edu.wpi.first.units.Units.Celsius;
import static edu.wpi.first.units.Units.NewtonMeters;
import static edu.wpi.first.units.Units.Ohms;
import static edu.wpi.first.units.Units.Radians;
import static edu.wpi.first.units.Units.RadiansPerSecond;
import static edu.wpi.first.units.Units.Volts;
import static edu.wpi.first.units.Units.VoltsPerRadianPerSecond;
import org.littletonrobotics.junction.AutoLog;
import edu.wpi.first.units.AngularVelocityUnit;
import edu.wpi.first.units.CurrentUnit;
import edu.wpi.first.units.TorqueUnit;
import edu.wpi.first.units.VoltageUnit;
import edu.wpi.first.units.measure.Angle;
import edu.wpi.first.units.measure.AngularVelocity;
import edu.wpi.first.units.measure.Current;
import edu.wpi.first.units.measure.Distance;
import edu.wpi.first.units.measure.Per;
import edu.wpi.first.units.measure.Resistance;
import edu.wpi.first.units.measure.Temperature;
import edu.wpi.first.units.measure.Voltage;

public interface DistanceSensorIO {
    /**
     * Represents the intrinsic physical and electrical properties of a DistanceSensor.
     * 
     * @param armatureResistance The DistanceSensor's armature resistance, representing the resistance of the DistanceSensor windings.
     * @param stallCurrent The DistanceSensor's stall current. This describes the maximum current output of the DistanceSensor when at a stall.
     * @param backEMFConstant The back electromotive force (EMF) constant of the DistanceSensor. This describes how much voltage the DistanceSensor generates for a given angular velocity.
     * @param torqueConstant The torque constant constant of the DistanceSensor. the amount of torque the DistanceSensor generates per ampere of current.
     */
    public record DistanceSensorIntrinsics(Resistance armatureResistance, Current stallCurrent, Per<VoltageUnit, AngularVelocityUnit> backEMFConstant, Per<TorqueUnit, CurrentUnit> torqueConstant) {
        public DistanceSensorIntrinsics()
        {
            this(Ohms.of(0.0), Amps.of(0.0), VoltsPerRadianPerSecond.ofNative(0.0),
                NewtonMeters.per(Amp).ofNative(0.0));
        }

        /**
         * Retrieves the torque constant of the DistanceSensor, which represents the amount of torque the
         * DistanceSensor generates per ampere of current. The torque constant is derived from the back EMF
         * constant under the assumption of an ideal DistanceSensor in SI units, where torque constant and
         * back EMF constant are numerically equal.
         *
         * @return A Measure of the torque constant.
         */
        public static Per<TorqueUnit, CurrentUnit> getTorqueConstantFromBackEMFConstant(
            Per<VoltageUnit, AngularVelocityUnit> backEMFConstant)
        {
            return NewtonMeters.per(Amp)
                .ofNativeBaseUnits(backEMFConstant.in(VoltsPerRadianPerSecond));
        }

        /**
         * Retrieves the back EMF constant of the DistanceSensor, which represents the amount of voltage the
         * DistanceSensor generates per radian per second. The back EMF constant is derived from the torque
         * constant under the assumption of an ideal DistanceSensor in SI units, where torque constant and
         * back EMF constant are numerically equal.
         *
         * @return A Measure of the back EMF constant.
         */
        public static Per<VoltageUnit, AngularVelocityUnit> getBackEMFConstantFromTorqueConstant(
            Per<TorqueUnit, CurrentUnit> torqueConstant)
        {
            return Volts.per(RadiansPerSecond).ofNative(torqueConstant.in(NewtonMeters.per(Amp)));
        }

        /**
         * Calculates the back EMF voltage generated by the DistanceSensor for a given angular velocity. This
         * value is proportional to both the angular velocity and the back EMF constant, and
         * represents the voltage that opposes the applied voltage as the DistanceSensor spins.
         *
         * @param angularVelocity The angular velocity of the DistanceSensor, in radians per second.
         * @return The back EMF generated by the DistanceSensor, as a Voltage measure.
         */
        public Voltage getBackEMF(AngularVelocity angularVelocity)
        {
            return Voltage.ofBaseUnits(
                backEMFConstant().times(angularVelocity).baseUnitMagnitude(),
                Volts);
        }
    }

    public record PID(double p, double i, double d) {
    }

    public enum ControlType {
        VOLTAGE,
        CURRENT
    }

    @AutoLog
    abstract class DistanceSensorIOInputs {
        /** Whether the DistanceSensor is connected. */
        public boolean connected = false;
        /** Whether the DistanceSensor is detected. */
        public boolean isDetected = false;
        /** Distance from the Distance sensor to the nearest object */
        public Distance distance = null;
        /** Standard deviation of the distance sensor measurement*/
        public Distance distanceStdDev = null;
        /** The amount of ambient infrared light detected by the DistanceSensor. */
        public double ambientSignal = 0.0;
        /** The actual center of the FOV in the X direction */
        public Angle fovCenterX = Radians.of(0.0);
        /** The actual center of the FOV in the Y direction */
        public Angle fovCenterY = Radians.of(0.0);
        /** The actual range of the FOV in the X direction */
        public Angle fovRangeX = Radians.of(0.0);
        /** The actual range of the FOV in the Y direction */
        public Angle fovRangeY = Radians.of(0.0);
        /** The applied voltage the DistanceSensor */
        public Voltage appliedVoltage = Volts.of(0.0);

    }

    public void updateInputs(DistanceSensorIOInputs inputs);

    public DistanceSensorConfiguration getConfiguration();

    public void setPosition(Angle position);

    // ------------------ Open Loop Control ------------------

    /**
     * Allows the DistanceSensor to move freely
     */
    public void runCoast();

    /**
     * Passively prevents the DistanceSensor shaft from rotating
     */
    public void runBrake();

    /**
     * Runs the DistanceSensor with a specified voltage (open-loop control).
     *
     * @param voltage The voltage to apply to the DistanceSensor in volts.
     */
    public void runVoltage(Voltage voltage);

    /**
     * Runs the DistanceSensor with a specified current (open-loop torque control).
     *
     * @param current The current to apply to the DistanceSensor in amperes.
     */
    public void runCurrent(Current current);

    // ------------------ Feedforward Terms ------------------

    /**
     * Sets the gravity feedforward gain (G) in terms of the current output mode (voltage or
     * current).
     *
     * @param g Gravity feedforward gain.
     */
    public void setG(double g);

    // ------------------ Position and Velocity Control ------------------

    /**
     * Runs the DistanceSensor to a target position in rotations using closed-loop control.
     *
     * @param positionRotations Target position in rotations.
     */
    public void runToPosition(Angle position);

    /**
     * Runs the DistanceSensor to a target velocity in RPS using closed-loop control.
     *
     * @param velocityRPS Target velocity in rotations per second.
     */
    public void runToVelocity(AngularVelocity velocity);

    // ------------------ Motion Profiled Control ------------------

    /**
     * Runs the DistanceSensor to a target position using motion profiling.
     *
     * @param positionRotations Target position in rotations.
     */
    public void runMotionProfiledPosition(Angle position);

    /**
     * Runs the DistanceSensor at a target velocity using motion profiling.
     *
     * @param velocityRPS Target velocity in rotations per second.
     */
    public void runMotionProfiledVelocity(AngularVelocity velocity);
}
